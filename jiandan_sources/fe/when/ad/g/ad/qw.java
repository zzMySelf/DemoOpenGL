package fe.when.ad.g.ad;

import androidx.constraintlayout.motion.widget.Key;
import androidx.core.text.BidiFormatter;
import androidx.exifinterface.media.ExifInterface;
import com.baidu.wallet.paysdk.datamodel.Bank;
import com.google.common.net.MediaType;
import com.google.zxing.datamatrix.encoder.HighLevelEncoder;
import com.google.zxing.oned.Code128Writer;
import java.util.HashMap;
import java.util.Map;
import kotlin.text.Typography;
import org.apache.commons.lang3.text.ExtendedMessageFormat;

public class qw {
    public static final Map<String, Character> qw;

    static {
        HashMap hashMap = new HashMap();
        qw = hashMap;
        hashMap.put("nbsp", Character.valueOf(Typography.nbsp));
        qw.put("iexcl", 161);
        qw.put("cent", Character.valueOf(Typography.cent));
        qw.put("pound", Character.valueOf(Typography.pound));
        qw.put("curren", 164);
        qw.put("yen", 165);
        qw.put("brvbar", 166);
        qw.put("sect", Character.valueOf(Typography.section));
        qw.put("uml", 168);
        qw.put("copy", Character.valueOf(Typography.copyright));
        qw.put("ordf", 170);
        qw.put("laquo", 171);
        qw.put("not", 172);
        qw.put("shy", 173);
        qw.put("reg", Character.valueOf(Typography.registered));
        qw.put("macr", 175);
        qw.put("deg", Character.valueOf(Typography.degree));
        qw.put("plusmn", Character.valueOf(Typography.plusMinus));
        qw.put("sup2", 178);
        qw.put("sup3", 179);
        qw.put("acute", 180);
        qw.put("micro", 181);
        qw.put("para", Character.valueOf(Typography.paragraph));
        qw.put("middot", Character.valueOf(Typography.middleDot));
        qw.put("cedil", 184);
        qw.put("sup1", 185);
        qw.put("ordm", 186);
        qw.put("raquo", 187);
        qw.put("frac14", 188);
        qw.put("frac12", Character.valueOf(Typography.half));
        qw.put("frac34", 190);
        qw.put("iquest", 191);
        qw.put("Agrave", 192);
        qw.put("Aacute", 193);
        qw.put("Acirc", 194);
        qw.put("Atilde", 195);
        qw.put("Auml", 196);
        qw.put("Aring", 197);
        qw.put("AElig", 198);
        qw.put("Ccedil", 199);
        qw.put("Egrave", 200);
        qw.put("Eacute", 201);
        qw.put("Ecirc", 202);
        qw.put("Euml", 203);
        qw.put("Igrave", 204);
        qw.put("Iacute", 205);
        qw.put("Icirc", 206);
        qw.put("Iuml", 207);
        qw.put("ETH", 208);
        qw.put("Ntilde", 209);
        qw.put("Ograve", 210);
        qw.put("Oacute", 211);
        qw.put("Ocirc", 212);
        qw.put("Otilde", 213);
        qw.put("Ouml", 214);
        qw.put("times", Character.valueOf(Typography.times));
        qw.put("Oslash", 216);
        qw.put("Ugrave", 217);
        qw.put("Uacute", 218);
        qw.put("Ucirc", 219);
        qw.put("Uuml", 220);
        qw.put("Yacute", 221);
        qw.put("THORN", 222);
        qw.put("szlig", 223);
        qw.put("agrave", 224);
        qw.put("aacute", 225);
        qw.put("acirc", 226);
        qw.put("atilde", 227);
        qw.put("auml", 228);
        qw.put("aring", 229);
        qw.put("aelig", Character.valueOf(HighLevelEncoder.LATCH_TO_C40));
        qw.put("ccedil", Character.valueOf(HighLevelEncoder.LATCH_TO_BASE256));
        qw.put("egrave", 232);
        qw.put("eacute", 233);
        qw.put("ecirc", 234);
        qw.put("euml", Character.valueOf(HighLevelEncoder.UPPER_SHIFT));
        qw.put("igrave", Character.valueOf(HighLevelEncoder.MACRO_05));
        qw.put("iacute", Character.valueOf(HighLevelEncoder.MACRO_06));
        qw.put("icirc", Character.valueOf(HighLevelEncoder.LATCH_TO_ANSIX12));
        qw.put("iuml", Character.valueOf(HighLevelEncoder.LATCH_TO_TEXT));
        qw.put("eth", Character.valueOf(HighLevelEncoder.LATCH_TO_EDIFACT));
        qw.put("ntilde", Character.valueOf(Code128Writer.ESCAPE_FNC_1));
        qw.put("ograve", Character.valueOf(Code128Writer.ESCAPE_FNC_2));
        qw.put("oacute", Character.valueOf(Code128Writer.ESCAPE_FNC_3));
        qw.put("ocirc", Character.valueOf(Code128Writer.ESCAPE_FNC_4));
        qw.put("otilde", 245);
        qw.put("ouml", 246);
        qw.put("divide", 247);
        qw.put("oslash", 248);
        qw.put("ugrave", 249);
        qw.put("uacute", 250);
        qw.put("ucirc", 251);
        qw.put("uuml", 252);
        qw.put("yacute", 253);
        qw.put("thorn", 254);
        qw.put("yuml", 255);
        qw.put("fnof", 402);
        qw.put("Alpha", 913);
        qw.put("Beta", 914);
        qw.put(ExifInterface.TAG_GAMMA, 915);
        qw.put("Delta", 916);
        qw.put("Epsilon", 917);
        qw.put("Zeta", 918);
        qw.put("Eta", 919);
        qw.put("Theta", 920);
        qw.put("Iota", 921);
        qw.put("Kappa", 922);
        qw.put("Lambda", 923);
        qw.put("Mu", 924);
        qw.put("Nu", 925);
        qw.put("Xi", 926);
        qw.put("Omicron", 927);
        qw.put("Pi", 928);
        qw.put("Rho", 929);
        qw.put("Sigma", 931);
        qw.put("Tau", 932);
        qw.put("Upsilon", 933);
        qw.put("Phi", 934);
        qw.put("Chi", 935);
        qw.put("Psi", 936);
        qw.put("Omega", 937);
        qw.put(Key.ALPHA, 945);
        qw.put("beta", 946);
        qw.put("gamma", 947);
        qw.put("delta", 948);
        qw.put("epsilon", 949);
        qw.put("zeta", 950);
        qw.put("eta", 951);
        qw.put("theta", 952);
        qw.put("iota", 953);
        qw.put("kappa", 954);
        qw.put("lambda", 955);
        qw.put("mu", 956);
        qw.put("nu", 957);
        qw.put("xi", 958);
        qw.put("omicron", 959);
        qw.put("pi", 960);
        qw.put("rho", 961);
        qw.put("sigmaf", 962);
        qw.put("sigma", 963);
        qw.put("tau", 964);
        qw.put("upsilon", 965);
        qw.put("phi", 966);
        qw.put("chi", 967);
        qw.put("psi", 968);
        qw.put("omega", 969);
        qw.put("thetasym", 977);
        qw.put("upsih", 978);
        qw.put("piv", 982);
        qw.put("bull", Character.valueOf(Typography.bullet));
        qw.put("hellip", Character.valueOf(Typography.ellipsis));
        qw.put("prime", Character.valueOf(Typography.prime));
        qw.put("Prime", Character.valueOf(Typography.doublePrime));
        qw.put("oline", 8254);
        qw.put("frasl", 8260);
        qw.put("weierp", 8472);
        qw.put(MediaType.IMAGE_TYPE, 8465);
        qw.put("real", 8476);
        qw.put("trade", Character.valueOf(Typography.tm));
        qw.put("alefsym", 8501);
        qw.put("larr", 8592);
        qw.put("uarr", 8593);
        qw.put("rarr", 8594);
        qw.put("darr", 8595);
        qw.put("harr", 8596);
        qw.put("crarr", 8629);
        qw.put("lArr", 8656);
        qw.put("uArr", 8657);
        qw.put("rArr", 8658);
        qw.put("dArr", 8659);
        qw.put("hArr", 8660);
        qw.put("forall", 8704);
        qw.put("part", 8706);
        qw.put("exist", 8707);
        qw.put("empty", 8709);
        qw.put("nabla", 8711);
        qw.put("isin", 8712);
        qw.put("notin", 8713);
        qw.put("ni", 8715);
        qw.put("prod", 8719);
        qw.put("sum", 8721);
        qw.put("minus", 8722);
        qw.put("lowast", 8727);
        qw.put("radic", 8730);
        qw.put("prop", 8733);
        qw.put("infin", 8734);
        qw.put("ang", 8736);
        qw.put("and", 8743);
        qw.put("or", 8744);
        qw.put("cap", 8745);
        qw.put("cup", 8746);
        qw.put("int", 8747);
        qw.put("there4", 8756);
        qw.put("sim", 8764);
        qw.put("cong", 8773);
        qw.put("asymp", Character.valueOf(Typography.almostEqual));
        qw.put("ne", Character.valueOf(Typography.notEqual));
        qw.put("equiv", 8801);
        qw.put("le", Character.valueOf(Typography.lessOrEqual));
        qw.put("ge", Character.valueOf(Typography.greaterOrEqual));
        qw.put("sub", 8834);
        qw.put("sup", 8835);
        qw.put("nsub", 8836);
        qw.put("sube", 8838);
        qw.put("supe", 8839);
        qw.put("oplus", 8853);
        qw.put("otimes", 8855);
        qw.put("perp", 8869);
        qw.put("sdot", 8901);
        qw.put("lceil", 8968);
        qw.put("rceil", 8969);
        qw.put("lfloor", 8970);
        qw.put("rfloor", 8971);
        qw.put("lang", 9001);
        qw.put("rang", 9002);
        qw.put("loz", 9674);
        qw.put("spades", 9824);
        qw.put("clubs", 9827);
        qw.put("hearts", 9829);
        qw.put("diams", 9830);
        qw.put("quot", '\"');
        qw.put("amp", Character.valueOf(Typography.amp));
        qw.put("apos", Character.valueOf(ExtendedMessageFormat.QUOTE));
        qw.put("lt", Character.valueOf(Typography.less));
        qw.put("gt", Character.valueOf(Typography.greater));
        qw.put("OElig", 338);
        qw.put("oelig", 339);
        qw.put("Scaron", 352);
        qw.put("scaron", 353);
        qw.put("Yuml", 376);
        qw.put("circ", 710);
        qw.put("tilde", 732);
        qw.put("ensp", 8194);
        qw.put("emsp", 8195);
        qw.put("thinsp", 8201);
        qw.put("zwnj", 8204);
        qw.put("zwj", 8205);
        qw.put("lrm", Character.valueOf(BidiFormatter.LRM));
        qw.put("rlm", Character.valueOf(BidiFormatter.RLM));
        qw.put("ndash", Character.valueOf(Typography.ndash));
        qw.put("mdash", Character.valueOf(Typography.mdash));
        qw.put("lsquo", Character.valueOf(Typography.leftSingleQuote));
        qw.put("rsquo", Character.valueOf(Typography.rightSingleQuote));
        qw.put("sbquo", Character.valueOf(Typography.lowSingleQuote));
        qw.put("ldquo", Character.valueOf(Typography.leftDoubleQuote));
        qw.put("rdquo", Character.valueOf(Typography.rightDoubleQuote));
        qw.put("bdquo", Character.valueOf(Typography.lowDoubleQuote));
        qw.put("dagger", Character.valueOf(Typography.dagger));
        qw.put("Dagger", Character.valueOf(Typography.doubleDagger));
        qw.put("permil", 8240);
        qw.put("lsaquo", 8249);
        qw.put("rsaquo", 8250);
        qw.put("euro", Character.valueOf(Typography.euro));
    }

    public static char qw(String str) {
        if (str.startsWith("#x")) {
            try {
                return (char) Integer.parseInt(str.substring(2), 16);
            } catch (NumberFormatException unused) {
                return 0;
            }
        } else if (str.startsWith(Bank.HOT_BANK_LETTER)) {
            try {
                return (char) Integer.parseInt(str.substring(1));
            } catch (NumberFormatException unused2) {
                return 0;
            }
        } else {
            Character ch = qw.get(str);
            if (ch == null) {
                return 0;
            }
            return ch.charValue();
        }
    }
}
